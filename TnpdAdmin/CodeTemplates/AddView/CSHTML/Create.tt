<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#@ import namespace="System.Xml" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
string[] nameSpaces = mvcHost.ViewDataTypeName.Split('.');
string functionTitle="";
     XmlDocument xmlDoc = new XmlDocument();
    
     xmlDoc.Load("F:\\website\\tnpd\\TnpdAdmin\\Config\\Menu.xml");
     XmlNodeList nodeList = xmlDoc.GetElementsByTagName("Modules");
    
     foreach (XmlNode xmlnode in nodeList)
      {
        
        if (xmlnode.Attributes != null && xmlnode.Attributes["Controller"].Value + "Controller"==mvcHost.ControllerName)
          {
            functionTitle=xmlnode.Attributes["Title"].Value;
          }
        }
#>
@using <#= nameSpaces[0] #>.Models
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
        
 string ViewName=functionTitle + "新增";
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {

#>

@{
    ViewBag.Title = "<#= ViewName #>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}

<h2><#= ViewName #></h2>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (mvcHost.ReferenceScriptLibraries) {
#>
<#
    if (!mvcHost.IsContentPage) {
#>
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
}
    bool  hasDateTime=false;
    bool  hasCkeditor=false;
    bool  hasFiles=false;
    foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
         if(property.Name.IndexOf("UpImage")>-1 || property.Name.IndexOf("UpPic")>-1 || property.Name.IndexOf("UpFile")>-1){
            hasFiles=true;
         }
    }
    if(hasFiles){
#>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" })) {
<#
    }else{
#>
    @using (Html.BeginForm()) {
<#
}

#>

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @ViewBag.Message
    <fieldset>
        <legend><#= mvcHost.ViewDataType.Name #></legend>

<#
  
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
    if (!property.IsPrimaryKey && !property.IsReadOnly && property.Scaffold && property.Name!="ListNum" && property.Name!="Poster" && property.Name!="InitDate" && property.Name!="InitOrg" && property.Name!="Updater" && property.Name!="UpdateDate"  && property.Name!="UpOriginalFileName") {
#>
        <div class="editor-label">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.Name #>)
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.Name #>)
<#
        }
#>

        </div>
        <div class="editor-field">
<#
        if (property.IsForeignKey) {
#>
            @Html.DropDownList("<#= property.Name #>")
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#
            } else if(property.IsEnum){
 #>
            @Html.DropDownListFor(model => model.<#= property.Name #>, new SelectList(Enum.GetValues(typeof(<#= property.UnderlyingType #>))))
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#
            }else if(property.IsDateTime){
            hasDateTime=true;
#>
            @Html.TextBoxFor(model => model.<#= property.Name #>,"{0:d}",new {@class="datepicker",target="" })
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#                
            }else if(property.Name.IndexOf("UpImage")>-1 || property.Name.IndexOf("UpPic")>-1 || property.Name.IndexOf("UpFile")>-1){
#>
            <input type="file" name="<#= property.Name #>s" />
<#              
            }else if(property.Name.IndexOf("Article")>-1 || property.Name.IndexOf("Description")>-1) {  
                hasCkeditor=true;
#>
            @Html.TextAreaFor(model => model.<#= property.Name #>,new { @class = "ckeditor" })
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#              
            }else if(property.Name.IndexOf("Memo")>-1 ) {   
#>
            @Html.TextAreaFor(model => model.<#= property.Name #>,new { @style = "height: 150px",placeholder=ModelsAttributeHelper<<#= mvcHost.ViewDataTypeName #>>.GetDisplayName("<#= property.Name #>") })
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#             
            }else {                 
#>
            @Html.TextBoxFor(model => model.<#= property.Name #>,new { placeholder=ModelsAttributeHelper<<#= mvcHost.ViewDataTypeName #>>.GetDisplayName("<#= property.Name #>") })
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
<#
        }
#>       
            
        </div>

<#
    }
        if ( property.Name=="ListNum") {
#>
             @Html.Hidden("ListNum","0")
<#
        }
}
#>
        <p>
            <input type="submit" value="新增" /><input type="button" onclick="history.back()" value="回到上一頁" />
        </p>
    </fieldset>
}


<#
if(mvcHost.IsContentPage && mvcHost.ReferenceScriptLibraries) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<#
         if(hasCkeditor){
#>
   <script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")" type="text/javascript"></script>
    <#
        }

        if(hasDateTime){
#>
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/themes/base/css")
    <script>
        $(document).ready(function() {
            $(".datepicker").datepicker();
        });
    </script>
    <#
        }
        
 #>

}
<#
}
   
#>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
    public bool IsEnum { get; set; }
    public bool IsDateTime{ get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
    
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && (IsBindableType(underlyingType) || underlyingType.IsEnum)) {
            string valueExpression = GetValueExpressionSuffix(prop);
            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop),
                IsEnum=underlyingType.IsEnum,
                IsDateTime=underlyingType==typeof(DateTime)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>